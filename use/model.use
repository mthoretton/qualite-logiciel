model DroneModel

class Testing
	attributes
		var1:Integer init = 10;
		var2:Integer init = 15;
end

class Constant
	attributes
		DCAP:Integer init = 10;	--DCAP
end

class Commande
	attributes
		load:Integer init = 10;
		livree:Boolean init = false;
		target:Receptacle;
end

class Drone
	attributes
		cap : Integer init = 10;
		path : OrderedSet(Noeud);
		energy : Integer init = 3;
		currentIdx : Integer;
		currentState : String init='livre';
		lagrossevardetest : Boolean init = false;
	operations
		recharger(): Integer
		begin
			self.currentState:='recharge';
			self.energy := self.energy + 1;
			result := 1;
		end
		deplacer() : Integer
		begin
		    self.lagrossevardetest := self.path->at(self.currentIdx).lelu(self.energy);
			self.currentState:='deplace';
			self.energy := self.energy - 1;
			self.currentIdx := self.currentIdx + 1;
			delete (self,self.noeud) from DroneOnSpot;
			insert (self,self.path->at(self.currentIdx)) into DroneOnSpot;
			result :=1;
		end
		livrer():Integer
		begin
			self.currentState:='livre';
			(self.noeud.oclAsType(Receptacle)).livrer(self.commande);
			self.commande.livree :=true;
			insert ((self.noeud.oclAsType(Receptacle)),self.commande) into ReceptacleHasCommand;
			delete (self,self.commande) from DroneHasCommande;

			-- Back to the warehouse
			delete (self,self.noeud) from DroneOnSpot;
			self.initPath(self.path->reverse());


			result := 1;
		end
		attendre()
		begin
			self.currentState:='attendre'
		end
		initPath(p:OrderedSet(Noeud))
		begin
			self.path:=p;
			self.currentIdx := 1;
			insert (self,p->at(self.currentIdx)) into DroneOnSpot;
		end
		initCommand(c:Commande)
		begin
			insert (self,c) into DroneHasCommande;
			self.initPath(c.target.path);
		end
		hop():Integer
		begin
			declare TR:Boolean, TDP:Boolean, TL:Boolean, toAtt:Boolean;

			-- Displacement is possible
			TDP := self.energy > 0 and true;	-- Node ok TODO
			-- Recharge is possible
			TR := self.energy < 3 and self.noeud.oclIsTypeOf(Receptacle);
			-- Shipping is possible
			TL := self.currentIdx = self.path->size();
			-- Nothing is possible (wait)

			result := 1;

-- THE PYRAMID OF DOOOOOM

			if self.currentState = 'deplace'
			--if self.oclIsInState(Drone::deplace)
			then
				if TR
				then 
					self.recharger();
				else
					if TL
					then
						self.livrer();
					else
						if TDP
						then
							self.deplacer();
						else
							self.attendre();
						end
					end
				end
			else
				if self.currentState = 'livre'
				then
					if TR
					then
						self.recharger();
					else
						if TDP
						then
							self.deplacer();
						end
					end
				else
					if self.currentState = 'recharge'
					then
						if TR
						then
							self.recharger();
						else
							if TL
							then
								self.livrer();
							else
								if TDP
								then
									self.deplacer();
								end
							end
						end
					else
						if self.currentState = 'attend' and TDP
						then
							self.deplacer();
						end
					end
				end
			end;
		end

	statemachines
		psm Machine
			states
				startUp:initial
				deplace
				attend
				recharge
				livre
			transitions
				startUp->deplace {create}

				deplace->attend {attendre()}
				deplace->livre {livrer()}
				deplace->recharge {recharger()}
				deplace->deplace {deplacer()}

				recharge->deplace {deplacer()}
				recharge->livre {livrer()}
				recharge->recharge {recharger()}

				livre->recharge {recharger()}
				livre->deplace {deplacer()}

				attend->deplace {deplacer()}
		end
end

class Noeud
	operations
		lelu(drone_energy : Integer):Boolean
		begin
			declare min_energy : Integer;
			min_energy  := 100;
			result:=false;

			for n in self.neighbours do
				if n.drone->notEmpty()
				then
					if n.drone.energy < min_energy
					then
						min_energy := n.drone.energy
					end;
				end;
			end;

			if drone_energy <= min_energy
			then
				result:=true;
			end;
		end
end

class Receptacle < Noeud
	attributes
		cap:Integer init = 100;
		load:Integer init = 0;
		path:OrderedSet(Noeud);
	operations
		livrer(co:Commande):Integer
		begin
			self.load := self.load + co.load;
			result:=self.load;
		end
end

class Entrepot < Noeud end

class Manager
	operations
		doHop()
		begin
			declare d:Drone;
			for d in Drone.allInstances() do
				d.hop();
			end;
		end
end

/* ----- Associations */

association DroneOnSpot between
	Drone[1] role drone;
	Noeud[1] role noeud;
end

association DroneHasCommande between
	Drone[1] role drone;
	Commande[1] role commande;
end

association Neighbours between
	Noeud[1] role main;
	Noeud[1..4] role neighbours;
end

association ReceptacleHasCommand between
	Receptacle[1];
	Commande[1];
end

/* ----- Constraints */
constraints
-- Il faut toujours pouvoir sortir d’un réceptacle → Interdire 4 drones encerclant un réceptale déjà occupé (blocage sinon)
--context Noeud inv notFullNeigh:
--	self.neighbours->size() < 0
	--self.neighbours->forAll()
	--at(1).isEmpty() -- ->isEmpty -- ors self.neighbours[2].isEmpty
-- Toutes les commandes ont une capacité plus petite que DCAP
-- context Commande inv commandCapaMax:
--	self.load < Constant.DCAP;
-- Un noeud n’est pas son propre voisin
context Noeud inv notOwnNeigh:
	self.neighbours->excludes(self)

-- Un seul entrepot
context Entrepot inv singlet:
	Entrepot.allInstances()->size() < 2

-- La quantité d’une livraison est DCAP = capacité d’un drone (on impose que chaque commande a une capacité de DCAP - pour s’assurer que chaque commande peut être livrée par une seule drone)
context Commande inv capa:
	self.load = 10 -- DCAP

-- Une commande à un réceptacle associé
context Commande inv hasReceptacle:
	self.target.oclIsUndefined() <> true

-- Un drone à un réceptacle destination 
context Drone inv hasDestination:
	(self.path->at(self.path->size()).oclIsTypeOf(Receptacle)) or (self.path->at(self.path->size()).oclIsTypeOf(Entrepot))

-- Un drone peut avoir un niveau d’energie = 0, 1, 2, 3
context Drone inv energyIsFine:
	self.energy >=0 and self.energy <=3

-- Un drone qui a l’energie = 0 ne peut pas être sur un noeud qui n’est pas un réceptacle
context Drone inv isOnReceptacleIfUncharger:
	self.energy > 0 or self.path->at(self.currentIdx).oclIsTypeOf(Receptacle) or self.path->at(self.currentIdx).oclIsTypeOf(Entrepot)

-- Au moins un réceptacle voisin de l’entrepôt 
context Noeud inv hasReceptacleNeigh:
	self.oclIsTypeOf(Entrepot) = false or self.oclIsTypeOf(Entrepot) and self.neighbours->exists(n:Noeud | n.oclIsTypeOf(Receptacle))
	-- or self.neighbours->exists(self.oclIsTypeOf(Receptacle))



-- #### Pré-post conditions pour les opérations de Drone


context Receptacle::livrer(co:Commande) : Integer
	pre: self.load + co.load < self.cap
	post: self.load = self.load@pre + co.load
		and result = self.load

context Drone::livrer(): Integer
	pre: self.noeud.oclIsTypeOf(Receptacle)
	post: result = 1

context Drone::recharger(): Integer
	pre: self.noeud.oclIsTypeOf(Receptacle)
		and self.energy < 3
	post: self.energy = self.energy@pre +1

context Drone::deplacer(): Integer
	pre: self.currentIdx < self.path->size()
		and self.energy > 0
	post: self.currentIdx > self.currentIdx@pre
		and self.energy = self.energy@pre -1

-- Pour chaque unité de temps, au moins une unité d'énergie est consommée
context Manager::doHop()
	post: Drone.allInstances()->exists(d:Drone | d.energy <> d.energy@pre)