model DroneModel

class Testing
	attributes
		var1:Integer init = 10;
		var2:Integer init = 15;
end

class Constant
	attributes
		DCAP:Integer init = 10;
end

class Commande
	attributes
		load:Integer init = 10;
		livree:Boolean init = false;
end

class Drone
	attributes
		cap : Integer init = 10;
		path : OrderedSet(Noeud);
		energy : Integer init = 3;
		currentIdx : Integer;
	operations
		recharger(): Integer
		begin
			self.energy := self.energy + 1;
			result := 1;
		end
		deplacer() : Integer
		begin
			self.energy := self.energy - 1;
			self.currentIdx := self.currentIdx + 1;
			delete (self,self.noeud) from DroneOnSpot;
			insert (self,self.path->at(self.currentIdx)) into DroneOnSpot;
			result :=1;
		end
		livrer():Integer
		begin
			(self.noeud.oclAsType(Receptacle)).livrer(self.commande);
			self.commande.livree :=true;
			insert ((self.noeud.oclAsType(Receptacle)),self.commande) into ReceptacleHasCommand;
			delete (self,self.commande) from DroneHasCommande;
			result := 1;
		end
		attendre()
		begin
			
		end
		initPath(p:OrderedSet(Noeud))
		begin
			self.path:=p;
			self.currentIdx := 1;
			insert (self,p->at(self.currentIdx)) into DroneOnSpot;
		end

end

class Noeud
end

class Receptacle < Noeud
	attributes
		cap:Integer init = 100;
		load:Integer init = 0;
	operations
		livrer(co:Commande):Integer
		begin
			self.load := self.load + co.load;
			result:=self.load;
		end
		lelu():Integer
		begin
			result := 1;
			result := self.neighbours[0];
		end
end

class Entrepot < Noeud end

class Manager

	operations
		doHop(droneSet : Set(Drone))
		begin
			/* Algorithme sequentiel */
		end

	statemachines
		psm Machine
			states
				startUp:initial

				hop
			transitions
				startUp -> hop {create}

				hop -> hop {doHop()}
		end
end

/* ----- Associations */

association DroneOnSpot between
	Drone[1] role drone;
	Noeud[1] role noeud;
end

association DroneHasCommande between
	Drone[1] role drone;
	Commande[1] role commande;
end

association Neighbours between
	Noeud[1] role main;
	Noeud[1..4] role neighbours;
end

association ReceptacleHasCommand between
	Receptacle[1];
	Commande[1];
end

/* ----- Constraints */
constraints
-- Il faut toujours pouvoir sortir d’un réceptacle → Interdire 4 drones encerclant un réceptale déjà occupé (blocage sinon)
context Noeud inv notFullNeigh:
	self.neighbours->size() < 0
	--self.neighbours->forAll()
	--at(1).isEmpty() -- ->isEmpty -- ors self.neighbours[2].isEmpty
-- Toutes les commandes ont une capacité plus petite que DCAP
-- context Commande inv commandCapaMax:
--	self.load < Constant.DCAP;
-- Un noeud n’est pas son propre voisin
context Noeud inv notOwnNeigh:
	self.neighbours->excludes(self)
-- DCAP < RCAP
--	$todo$

-- Il ya DNB drones et RNB réceptacles


-- Un réceptacle est un conteneur de capacité RCAP


-- Les produits d’une commande doivent être livrés par un drone depuis l’entrepôt jusqu’au réceptacle.


-- A un moment donné, au plus un drone peut interagir avec un réceptacle.


-- Il existe au moins un réceptacle voisin de l’entrepôt.


-- Pour chaque réceptacle, il existe un chemin partant de l’entrepôt et menant à ce réceptacle en passant par un ensemble d’autres réceptacles tel que 


-- la distance entre tout couple d’éléments consécutifs de ce chemin soit inférieure ou égale à 2.


-- A un moment donné, il y a au plus un drone à chaque intersection de la grille.


-- Au niveau d’un réceptacle les actions de livrer les produits et de recharger la batterie ne peuvent pas avoir lieu en même temps.


-- L

context Receptacle::livrer(co:Commande) : Integer
	pre: self.load + co.load < self.cap
	post: self.load = self.load@pre + co.load
		and result = self.load

context Drone::livrer(): Integer
	pre: self.noeud.oclIsTypeOf(Receptacle)
	post: result = 1

context Drone::recharger(): Integer
	pre: self.noeud.oclIsTypeOf(Receptacle)
		and self.energy < 3
	post: self.energy = self.energy@pre +1

context Drone::deplacer(): Integer
	pre: self.currentIdx < self.path->size()
		and self.energy > 0
	post: self.currentIdx > self.currentIdx@pre
		and self.energy = self.energy@pre -1