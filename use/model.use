model DroneModel

class Commande
	attributes
		load:Integer init = 10;
end

class Drone
	attributes
		cap : Integer init = 10
		path : Set(Noeud)
		current : Noeud
		energy : Integer
		command : Commande
	operations
		recharger()
		begin

		end
		deplacer()
		begin
			
		end
		livrer()
		begin
			
		end
		attendre()
		begin
			
		end
end

class Noeud
	attributes
		drone:Drone
end

class Receptacle < Noeud
	attributes
		cap:Integer init = 100;
		load:Integer init = 0;
	operations
		livrer(co:Commande)
		begin
			if self.load + co.load < self.cap
	        then
	            --self.load = self.load + co.load;
	        end
		end
end

class Entrepot < Noeud end

class Manager

	operations
		doHop(droneSet : Set(Drone))
		begin
			/* Algorithme sequentiel */
		end

	statemachines
		psm Machine
			states
				startUp:initial

				hop
			transitions
				startUp -> hop {create}

				hop -> hop {doHop()}
		end
end

/* ----- Associations */

association Neighbours between
	Noeud[1] role main;
	Noeud[1..4] role neighbours;
end

/* ----- Constraints */
constraints

context Noeud inv notOwnNeigh:
	self.neighbours->excludes(self)

-- M

-- L

