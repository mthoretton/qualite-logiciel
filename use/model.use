model DroneModel

class Constant
	attributes
		DCAP:Integer init = 10;
end

class Commande
	attributes
		load:Integer init = 10;
end

class Drone
	attributes
		cap : Integer init = 10
		path : Set(Noeud)
		current : Noeud
		energy : Integer
		command : Commande
	operations
		recharger()
		begin

		end
		deplacer()
		begin
			
		end
		livrer()
		begin
			
		end
		attendre()
		begin
			
		end
end

class Noeud
	attributes
		drone:Drone
end

class Receptacle < Noeud
	attributes
		cap:Integer init = 100;
		load:Integer init = 0;
	operations
		livrer(co:Commande)
		begin
			if self.load + co.load < self.cap
	        then
	            --self.load = self.load + co.load;
	        end
		end
end

class Entrepot < Noeud end

class Manager

	operations
		doHop(droneSet : Set(Drone))
		begin
			/* Algorithme sequentiel */
		end

	statemachines
		psm Machine
			states
				startUp:initial

				hop
			transitions
				startUp -> hop {create}

				hop -> hop {doHop()}
		end
end

/* ----- Associations */

association Neighbours between
	Noeud[1] role main;
	Noeud[1..4] role neighbours;
end

/* ----- Constraints */
constraints
-- Il faut toujours pouvoir sortir d’un réceptacle → Interdire 4 drones encerclant un réceptale déjà occupé (blocage sinon)
context Noeud inv notFullNeigh:
	self.neighbours->size() < 0
	--self.neighbours->forAll()
	--at(1).isEmpty() -- ->isEmpty -- ors self.neighbours[2].isEmpty
-- Toutes les commandes ont une capacité plus petite que DCAP
-- context Commande inv commandCapaMax:
--	self.load < Constant.DCAP;
-- Un noeud n’est pas son propre voisin
context Noeud inv notOwnNeigh:
	self.neighbours->excludes(self)
-- DCAP < RCAP
--	$todo$

-- Il ya DNB drones et RNB réceptacles


-- Un réceptacle est un conteneur de capacité RCAP


-- Une commande identifie un ensemble de produits et un réceptacle


-- Les produits d’une commande doivent être livrés par un drone depuis l’entrepôt jusqu’au réceptacle.


-- Un drone a une capacitéDCAP (unité entière).


-- Un drone interagit avec un réceptacle pour y déposer les produits qu’il porte.


-- Après avoir livré sa commande, un drone rejoint l’entrepôt.


-- Un drone peut recharger sa batterie au niveau de l’entrepôt.


-- A un moment donné, au plus un drone peut interagir avec un réceptacle.


-- On considère que l’entrepôt et les réceptacles sont situés sur une grille orthogonale régulière.


-- Il existe au moins un réceptacle voisin de l’entrepôt.


-- Pour chaque réceptacle, il existe un chemin partant de l’entrepôt et menant à ce réceptacle en passant par un ensemble d’autres réceptacles tel que 


-- la distance entre tout couple d’éléments consécutifs de ce chemin soit inférieure ou égale à 2.


-- La capacité de la batterie d’un drone est de 3 unités d’énergie.


-- Un drone consomme 1 unité d’énergie pour faire 1 pas sur la grille.


-- Un drone prend 1 unité de temps pour se déplacer de 1 pas sur la grille.


-- Un drone prend 1 unité de temps pour recharger sa batterie de 1 unité d’énergie.


-- A un moment donné, il y a au plus un drone à chaque intersection de la grille.


-- Une fois le réceptacle rejoint, l’action de livrer les produits prend 1 unité de temps.


-- Au niveau d’un réceptacle les actions de livrer les produits et de recharger la batterie ne peuvent pas avoir lieu en même temps.


-- Plusieurs drones peuvent se retrouver en attente devant un même réceptacle actuellement occupé par un drone.


-- Plusieurs drones peuvent vouloir rejoindre la même position au prochain pas temporel.


-- Dans ce dernier cas, les drones se mettent d’accord entre eux pour déterminer qui a priorité, et


-- l’optimisation de l’énergie prime sur celle du temps...mais il faut assurer le progrès.
